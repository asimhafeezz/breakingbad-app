{"version":3,"sources":["img/logo.png","img/spinner.gif","components/header.js","components/characters/characterItem.js","components/characters/charactergrid.js","components/search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","header","className","src","logo","alt","characterItem","item","style","height","width","border","padding","borderRadius","justifyContent","img","paddingRight","name","nickname","status","charactergrid","items","isLoading","spinner","map","key","char_id","Search","setQuery","useState","value","setValue","type","placeholder","autoFocus","onChange","e","q","target","App","setItems","setIsLoading","query","fetchItems","a","axios","result","data","useEffect","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,qLCU5BC,EARA,WACX,OACI,4BAAQC,UAAU,UACd,yBAAKC,IAAKC,IAAMC,IAAI,wBCQjBC,EAXO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACI,yBAAMC,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAASC,OAAQ,kBAAmBC,QAAS,OAAQC,aAAc,QAASC,eAAe,WAC9H,6BAASZ,UAAU,UAAS,yBAAKC,IAAKI,EAAKQ,IAAKP,MAAO,CAACC,OAAO,QAAUC,MAAM,YAC/E,2BAAG,4BAAQF,MAAO,CAACQ,aAAa,UAA7B,SAAsDT,EAAKU,MAC9D,2BAAG,4BAAQT,MAAO,CAACQ,aAAa,UAA7B,cAA2DT,EAAKW,UACnE,2BAAG,4BAAQV,MAAO,CAACQ,aAAa,UAA7B,WAAwDT,EAAKY,U,iBCM7DC,EAVO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MACrB,OAD6C,EAAhBC,UACV,wBAAIpB,UAAU,UAAS,yBAAKC,IAAKoB,IAASf,MAAO,CAACC,OAAO,WACxE,6BAASP,UAAU,SAEXmB,EAAMG,KAAI,SAAAjB,GAAI,OAAI,kBAAC,EAAD,CAAekB,IAAKlB,EAAKmB,QAASnB,KAAMA,SCY3DoB,EAlBA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAEDC,mBAAS,IAFR,mBAEpBC,EAFoB,KAEbC,EAFa,KAS3B,OACI,6BAAS7B,UAAU,UACf,8BACI,2BAAO8B,KAAK,OAAO9B,UAAU,eAAe+B,YAAY,oBAAoBC,WAAS,EAACJ,MAAOA,EAAOK,SAAU,SAACC,GAAD,OAR3GC,EAQ2HD,EAAEE,OAAOR,MAP/IC,EAASM,QACTT,EAASS,GAFE,IAAAA,Q,uBC4BJE,MA1Bf,WAAgB,IAAD,EACaV,mBAAS,IADtB,mBACNR,EADM,KACCmB,EADD,OAEqBX,oBAAS,GAF9B,mBAENP,EAFM,KAEKmB,EAFL,OAGaZ,mBAAS,IAHtB,mBAGNa,EAHM,KAGCd,EAHD,KAKPe,EAAU,uCAAG,4BAAAC,EAAA,sEACIC,IAAM,sDAAD,OAAuDH,IADhE,OACXI,EADW,OAGjBN,EAASM,EAAOC,MAChBN,GAAa,GAJI,2CAAH,qDAWhB,OAJAO,qBAAU,WACRL,MACA,CAACD,IAGD,yBAAKxC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAW0B,SAAU,SAAAS,GAAC,OAAIT,EAASS,MACnC,kBAAC,EAAD,CAAef,UAAWA,EAAWD,MAAOA,IAC5C,uBAAGnB,UAAU,SAASM,MAAO,CAACyC,UAAU,SAAxC,8BCjBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62593bd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from 'react'\r\nimport logo from '../img/logo.png'\r\nconst header = () => {\r\n    return (\r\n        <header className=\"center\">\r\n            <img src={logo} alt=\"Breaking Bad Logo\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default header\r\n","import React from 'react'\r\n\r\nconst characterItem = ({ item }) => {\r\n    return (\r\n        <div  style={{ height: '18rem', width: '13rem', border: '2px solid white', padding: '1rem', borderRadius: '.5rem', justifyContent:'center'}}>\r\n            <section className=\"center\"><img src={item.img} style={{height:'11rem' , width:'11rem'}}  /></section>\r\n            <p><strong style={{paddingRight:'.5rem'}}>Name:</strong>{item.name}</p>\r\n            <p><strong style={{paddingRight:'.5rem'}}>Nick Name:</strong>{item.nickname}</p>\r\n            <p><strong style={{paddingRight:'.5rem'}}>Status:</strong>{item.status}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default characterItem\r\n","import React from 'react'\r\nimport CharacterItem from './characterItem'\r\nimport spinner from '../../img/spinner.gif'\r\n\r\nconst charactergrid = ({ items , isLoading }) => {\r\n    return isLoading ? <h1 className=\"center\"><img src={spinner} style={{height:'5rem'}} /></h1> : (\r\n        <section className=\"cards\">\r\n            {\r\n                items.map(item => <CharacterItem key={item.char_id} item={item} />)\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default charactergrid\r\n","import React , {useState, useEffect} from 'react'\r\n\r\nconst Search = ({setQuery}) => {\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    let onchange = q => {\r\n        setValue(q)\r\n        setQuery(q)\r\n    }\r\n\r\n    return (\r\n        <section className=\"search\">\r\n            <form>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search Characters\" autoFocus value={value} onChange={(e) => onchange(e.target.value)} />\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React , {useState , useEffect} from 'react';\nimport Header from './components/header'\nimport CharacterGrid from './components/characters/charactergrid'\nimport SearchBar from './components/search'\nimport axios from 'axios'\nimport './App.css';\nimport search from './components/search';\n\nfunction App() {\n  const [items, setItems] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [query, setQuery] = useState('')\n\n  const fetchItems = async () => {\n    const result = await axios(`https://www.breakingbadapi.com/api/characters?name=${query}`)\n    // console.log(result.data)\n    setItems(result.data)\n    setIsLoading(false)\n  }\n  \n  useEffect(() => {\n    fetchItems()\n  },[query])\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <SearchBar setQuery={q => setQuery(q)} />\n      <CharacterGrid isLoading={isLoading} items={items} />\n      <p className=\"center\" style={{marginTop:'5rem'}}>Thanks to Traversy Media</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}